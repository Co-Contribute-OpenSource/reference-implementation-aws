apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: ${ROLE_ARN}
  name: ${SA_NAME}
  namespace: ${NAMESPACE}

---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: ${SECRET_STORE_NAME}
  namespace: ${NAMESPACE}
spec:
  provider:
    aws:
      service: SecretsManager
      region: ${REGION}
      auth:
        jwt:
          serviceAccountRef:
            name: ${SA_NAME}


# You can check below objects into git if desired.
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keycloak-config
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: ${SECRET_STORE_NAME}
    kind: SecretStore
  target:
    name: keycloak-config
    creationPolicy: Owner
  data:
    - secretKey: KC_HOSTNAME
      remoteRef:
        key: cnoe/keycloak/config
        property: KC_HOSTNAME
    - secretKey: KEYCLOAK_ADMIN_PASSWORD
      remoteRef:
        key: cnoe/keycloak/config
        property: KEYCLOAK_ADMIN_PASSWORD

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postgresql-config
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: ${SECRET_STORE_NAME}
    kind: SecretStore
  target:
    name: postgresql-config
    creationPolicy: Owner
  data:
    - secretKey: POSTGRES_DB
      remoteRef:
        key: cnoe/keycloak/config
        property: POSTGRES_DB
    - secretKey: POSTGRES_PASSWORD
      remoteRef:
        key: cnoe/keycloak/config
        property: POSTGRES_PASSWORD

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keycloak-user-config
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: ${SECRET_STORE_NAME}
    kind: SecretStore
  target:
    name: keycloak-user-config
    creationPolicy: Owner
  data:
    - secretKey: user1-password
      remoteRef:
        key: cnoe/keycloak/config
        property: user1-password
